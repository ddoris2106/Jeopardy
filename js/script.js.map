{"version":3,"sources":["script.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","category1","document","querySelectorAll","category2","category3","category4","category5","category6","categories","jeopardyAPI","Clues","this","clue","randNum","Math","floor","random","self","fetch","then","response","json","push","category","title","clueVal","clueQuest","question","clueAns","answer","getClues","console","error","hasEmptyField","results","clues","_loop","_clues","_i","setTimeout","includes","_step","_iterator","log","concat","innerHTML","j","$","on","preventDefault","className","names","split","cat","substr","pos","currentClue","autoFillPopUp","classList","add","appendTo","body","$submittedAns","val","toLowerCase","parent","remove"],"mappings":"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","file":"script.js","sourcesContent":["// import { autoFillPopUp } from \"app/popup.js\";\r\n// import { autoFillPopUp } from \"./app/popup.js\";\r\n// get the location of the clues in the HTML document\r\nconst category1 = document.querySelectorAll(\".cat1\");\r\nconst category2 = document.querySelectorAll(\".cat2\");\r\nconst category3 = document.querySelectorAll(\".cat3\");\r\nconst category4 = document.querySelectorAll(\".cat4\");\r\nconst category5 = document.querySelectorAll(\".cat5\");\r\nconst category6 = document.querySelectorAll(\".cat6\");\r\n\r\n\r\n// store the locations in an array\r\nconst categories = [category1, category2, category3, category4, category5, category6];\r\n\r\n// store the URL for the API\r\nconst jeopardyAPI = \"http://jservice.io/api/clues?category=\";\r\n\r\nclass Clues {\r\n    constructor() {\r\n        this.clue = [];\r\n        this.randNum = Math.floor(Math.random() * 1000);\r\n        // this.randNum = 413;\r\n    }\r\n\r\n    getClues(){\r\n        var self = this;\r\n        fetch(jeopardyAPI + this.randNum)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                // Check if the category has enough clues\r\n                if (json.length >= 5) {\r\n                    // console.log(\"Valid\");\r\n\r\n                    // If the array is not empty, erase the previous clues\r\n                    if (self.clue.length > 0) {\r\n                        self.clue = [];\r\n                    }\r\n                    self.clue.push(json[0].category.title);\r\n                    for (var i = 0; i < 5; i++) {\r\n                        let clueVal = json[i].value;\r\n                        let clueQuest = json[i].question;\r\n                        let clueAns = json[i].answer;\r\n                        self.clue.push({clueVal, clueQuest, clueAns});\r\n                    }\r\n                }\r\n                // If the category does not have enough clues, request a new category and run the function again\r\n                else {\r\n                    // console.log(\"Not Valid\");\r\n                    self.randNum = Math.floor(Math.random() * 1000);\r\n                    self.getClues();\r\n                }\r\n            })\r\n            .catch(err => console.error(err));\r\n    }\r\n}\r\n\r\n// Function to check if a clue has an empty question or answer\r\nconst hasEmptyField = clue => {\r\n    var results = [];\r\n\r\n    // Go through all the clues\r\n    for (var i = 1; i < clue.length; i++) {\r\n        // Check if a clue has an empty question\r\n        if(clue[i].clueQuest == \"\"){\r\n            // console.log(`Clue ${i} an empty Question.`);\r\n            results.push(1);\r\n        }\r\n        // Check if a clue has an empty answer\r\n        else if(clue[i].clueAns == \"\") {\r\n            // console.log(`Clue ${i} an empty Answer.`);\r\n            results.push(1);\r\n        }\r\n        else {\r\n            // console.log(`\"Clue ${i} clear for TakeOff! :)\"`);\r\n            results.push(0);\r\n        }\r\n    }\r\n    return results;\r\n}\r\n\r\n// const countdown = () => {\r\n//     var date = new Date();\r\n//     var hour = date.getHours();\r\n//     var mins = date.getMinutes();\r\n//     var secs = date.getSeconds();\r\n//     console.log(hour, mins, secs);\r\n\r\n// }\r\n\r\n// countdown();\r\n\r\n// function autoFillPopUp(question) {\r\n//     // console.log(e.target.className);\r\n//     // let names = e.target.className.split(\" \");\r\n//     // let cat = names[1].substr(-1) - 1;\r\n//     // let pos = names[2].substr(-1) - 1;\r\n  \r\n//     // console.log(names);\r\n//     // console.log(cat, pos);\r\n  \r\n//     let $questionText = $(\"<label>\")\r\n//       .attr(\"for\", \"answer\")\r\n//       .text(`${question}`)\r\n//       .addClass(\"ques\")\r\n//       .css(\"display\", \"block\");\r\n  \r\n//     let $input = $(\"<input>\")\r\n//       .attr(\"type\", \"text\")\r\n//       .attr(\"name\", \"answer\")\r\n//       .css(\"display\", \"inline-block\")\r\n//       .addClass(\"ans\");\r\n  \r\n//     let $submitButton = $(\"<input>\")\r\n//       .attr(\"type\", \"submit\")\r\n//       .attr(\"value\", \"submit\")\r\n//       .css(\"display\", \"inline-block\");\r\n  \r\n//     let $field = $(\"<form>\")\r\n//       .addClass(\"field\")\r\n//       .append($questionText)\r\n//       .append($input)\r\n//       .append($submitButton);\r\n  \r\n//     return $(\"<div>\")\r\n//     //   .html(\"JEOPARDY!\")\r\n//       .addClass(\"question\")\r\n//       .append($field);\r\n  \r\n//     //   .appendTo(document.body)\r\n//     //   .on(\"submit\", function(e){\r\n//     //     e.preventDefault();\r\n//     //     console.log(\"goine\");\r\n//     //     console.log(e.target.className);\r\n//     //     $(e.target).\r\n//     //       parent().\r\n//     //       remove();\r\n//     // });\r\n// }\r\n\r\n// Generate clues for all categories\r\nvar clues = [];\r\n\r\nfor (var i = 0; i < categories.length; i++) {\r\n    clues[i] = new Clues();\r\n}\r\n\r\nfor (let clue of clues) {\r\n    clue.getClues();\r\n    setTimeout(() => {\r\n        // Check each clue for an empty field\r\n        var result = hasEmptyField(clue.clue);\r\n        if (result.includes(1)) {\r\n            // console.log(\"Has an Empty Field. Generating new clues\");\r\n            clue.getClues();\r\n        }\r\n        else {\r\n            // console.log(\"All fields clear!\");\r\n        }\r\n        // console.log(clue.clue);\r\n\r\n    }, 500);\r\n\r\n}\r\n\r\nsetTimeout(() => {\r\n    // console.log(\"Working\");\r\n    // var emptyVals = [];\r\n    for (let clue of clues) {\r\n        // Check if all clues have Clue Values\r\n        for (let i = 1; i < clue.clue.length; i++) {\r\n            // console.log(\"Working\");\r\n            // Check for empty space\r\n            if (clue.clue[i].clueVal == null) {\r\n                // let val = i * 100;\r\n                console.log(\"There is a missing value!\");\r\n                console.log(i * 100);\r\n                clue.clue[i].clueVal = `${(i * 100)}`;\r\n            }\r\n        }\r\n    }\r\n}, 2000);\r\n\r\n\r\n// Display the category names\r\nsetTimeout(() => {\r\n    for (var i = 0; i < categories.length; i++) {\r\n        categories[i][0].innerHTML = `${clues[i].clue[0]}`\r\n        for (var j = 1; j < categories[i].length; j++) {\r\n            categories[i][j].innerHTML = `${clues[i].clue[j].clueVal}`;\r\n        }\r\n    }\r\n\r\n    console.log(clues);\r\n\r\n    $(\".clue\").on(\"click\", function(e){\r\n        e.preventDefault();\r\n        console.log(e);\r\n        console.log(e.target.className);\r\n        let names = e.target.className.split(\" \");\r\n        let cat = names[1].substr(-1) - 1;\r\n        let pos = names[2].substr(-1);\r\n    \r\n        // console.log(names);\r\n        console.log(cat, pos);\r\n        //console.log(\"Working\");\r\n        console.log(clues[cat].clue[pos].clueQuest);\r\n        let currentClue = autoFillPopUp(clues[cat].clue[pos].clueQuest);\r\n        console.log(currentClue);\r\n        \r\n\r\n        e.target.classList.add(\"clicked\");\r\n    \r\n        currentClue.appendTo(document.body)\r\n        .on(\"submit\", function(e){\r\n            e.preventDefault();\r\n            console.log(\"submitted. checking!\");\r\n            \r\n            //   console.log(e.target.className);\r\n            let $submittedAns = $(\".ans\").val().toLowerCase();\r\n            let answer = clues[cat].clue[pos].clueAns.toLowerCase();\r\n            // answer.toLowerCase();\r\n            // console.log(answer);\r\n\r\n            if($submittedAns == answer){\r\n                console.log(\"correct\");\r\n            }\r\n            else{\r\n                console.log(\"incorrect\");\r\n                console.log(answer);\r\n            }\r\n            \r\n            $(e.target).\r\n                parent().\r\n                remove();\r\n        });\r\n\r\n\r\n    });\r\n}, 15000);\r\n"]}